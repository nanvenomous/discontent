package ui

type headerLink struct {
	Rel, Href string
}

var (
	headerLinks = []headerLink{
		{Rel: "manifest", Href: "/manifest.json"},
		// {Rel: "icon", Href: constants.ASSET_LOGO},
		// {Rel: "apple-touch-icon", Href: constants.ASSET_LOGO},
		{Rel: "stylesheet", Href: "/icons/light/style.css"},
		{Rel: "stylesheet", Href: "/css/tailwind-generated.min.css"},
	}
)

templ headers() {
	<meta charset="utf-8"/>
	<meta name="description" content="Manage your content, flowing like a stream, organized dreams."/>
	for _, lk := range headerLinks {
		<link rel={ lk.Rel } href={ lk.Href }/>
	}
	<title>Discontent</title>
}

templ Page(body templ.Component) {
	<head>
		@headers()
	</head>
	<body>
		@body
	</body>
}

templ icon(css string) {
	<i class={ "ph-light text-gray-500 dark:text-gray-400", css }></i>
}

type labelProps struct {
	Text, For string
}

templ label(props labelProps) {
	<label
		for={ props.For }
		class="block mb-2 text-sm font-medium text-gray-900 dark:text-white"
	>{ props.Text }</label>
}

// "ph-textbox"
type iconInputProps struct {
	ID, Label, Placeholder, Icon, Value string
}

templ iconInput(props iconInputProps) {
	@label(labelProps{For: props.ID, Text: props.Label})
	<div class="relative mb-6">
		<div class="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
			@icon(props.Icon)
		</div>
		<input
			type="text"
			if props.ID != "" {
				id={ props.ID }
			}
			class={ "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" }
			placeholder={ props.Placeholder }
			value={ props.Value }
		/>
	</div>
}
